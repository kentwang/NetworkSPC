library(ergm)
library(R.matlab)
adjR 
# start the Matlab server. Needs to pause to get fully booted
Matlab$startServer()
Sys.sleep(5)
# create a Matlab client
matlab = Matlab()
# opent the Matlab client
isOpen = open(matlab)
## The adj matrices should be generated through simulation and passed
# through the interface.
# In the trial, load the adj sequence
# evaluate(matlab, "load('enron_email_networks_directed.mat', 'adj');")
# define the type I error
setVariable(matlab, alpha = 0.05)
q()
library(ergm)
library(R.matlab)
setwd("../Dropbox/2015 Spring/ST 697/ST 697 R and Matlab Interface/")
# start the Matlab server. Needs to pause to get fully booted
Matlab$startServer()
Sys.sleep(5)
# create a Matlab client
matlab = Matlab()
# opent the Matlab client
isOpen = open(matlab)
## The adj matrices should be generated through simulation and passed
# through the interface.
# In the trial, load the adj sequence
# evaluate(matlab, "load('enron_email_networks_directed.mat', 'adj');")
# define the type I error
setVariable(matlab, alpha = 0.05)
########### start the simulation for m = 1000  #############
adjR <- list()
for(m in 1:100){
  g.sim = simulate(network(100) ~ transitive + mutual, coef=c(0, 0), nsim = 1)[,]
  cat('iteration: ', m, '\n')
  adjR[[m]] <- g.sim
}
  #adjR = lapply(g.sim, as.matrix.network.adjacency)
  networkSize = length(adjR)
  names(adjR) = paste("mat", 1:networkSize, sep = "")
  writeMat("adjM.mat", adjM = adjR)
  evaluate(matlab, "load('adjM.mat', 'adjM');")
  evaluate(matlab, "adjMSeq = struct2cell(adjM);")
  # temp = getVariable(matlab, "adjM")
  evaluate(matlab, "[mu, Sigma, loadings, theta, uclT2, uclSPE]=phaseIanalysis(adjMSeq, alpha);")
  mu <- getVariable(matlab, "mu")$mu
  Sigma <- getVariable(matlab, "Sigma")$Sigma
  loadings <- getVariable(matlab, "loadings")$loadings
  theta <- getVariable(matlab, "theta")$theta
  uclT2 <- getVariable(matlab, "uclT2")$uclT2
  uclSPE <- getVariable(matlab, "uclSPE")$uclSPE
uclSPE 
uclT2 
theta 
loadings 
Sigma 
mu 
getwd()
q()
